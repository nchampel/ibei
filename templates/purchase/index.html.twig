{% extends 'basebootstrap.html.twig' %}

{% block title %}Purchase index
{% endblock %}

{# @var purchasesBuyable \App\Entity\Purchase[] #}

{% block body %}


	<ul class="nav nav-tabs" id="myTab" role="tablist">
		<li class="nav-item">
			<a class="nav-link custom-relative {{ userNotconnected.nav }}" id="buyable-tab" data-bs-toggle="tab" href="#buyable" role="tab">
				En vente
				{% if isPurchaseBuyable %}
					<span class="custom-badge-notif">
						<span class="pulse-char">!</span>
					</span>
				{% endif %}
			</a>
		</li>
		<li class="nav-item">
			<a class="nav-link {{ userConnected.nav }}" id="possessed-tab" data-bs-toggle="tab" href="#possessed" role="tab">Poss√©d√©s</a>
		</li>
	</ul>

	<div class="tab-content mt-5" id="myTabContent">
		<div class="tab-pane fade {{ userNotconnected.tab }}" id="buyable" role="tabpanel" aria-labelledby="buyable-tab">
			<div class="d-flex flow-row justify-content-center">
				{% for purchase in purchasesBuyable %}
					{# <div class="card mr-4 box-shadow-custom custom-bg-card text-white custom-border-radius custom-shadow-buyable" style="width: 18rem;">
						{% if app.user and app.user.money >= purchase.price %}
							<span class="custom-badge-notif">
								<span class="pulse-char">!</span>
							</span>
						{% endif %}
						<div class="card-body m-2 bg-gray-800 p-4 rounded-lg shadow-md">
							<h5 class="card-title">{{ purchase.product.name }}</h5>
							<p class="card-text">{{ purchase.product.description }}</p>
							<p class="card-text">Gain :
								{{ purchase.gain | format_number }}
								‚Ç¨</p>
							<p class="card-text">Cooldown :
								{{ purchase.cooldown | duration_format }}</p>
							<p class="card-text">Prix :
								{{ purchase.price | format_number }}
								‚Ç¨</p>
							{% if app.user %}
								<a href={{ path('app_purchase_buy', {'id': purchase.id} )}} class="btn btn-primary">Acheter</a>
							{% endif %}
						</div>
					</div> #}
					<div class="harvest-card mr-4 mb-4">
						<h5 class="card-title fw-600">{{ purchase.product.name }}</h5>
						<div class="timer text-white">{{ purchase.cooldown | duration_format }}</div>
						<div class="item-icon">ü•ï</div>
						<div class="price p-2">
							<div class="coin d-flex align-items-center justify-content-center">
								<img src="{{ asset('images/euro ibei en cours 5.png') }}" alt="euro" class="icon icon-euro" />
								<span class="value">
									{{ purchase.price | format_number }}
									‚Ç¨</span>
							</div>
						</div>
							{% if app.user and user.getMoney() >= purchase.price %}
							<div class="mt-4 buy-button animate-button-harvest">
								<a href={{ path('app_purchase_buy', {'id': purchase.id} )}} class="">Acheter</a>
							</div>
							{% elseif app.user and user.getMoney() < purchase.price %}
								<p class="mt-4 no-money">Manquant : {{ (purchase.price - user.getMoney()) | format_number }} ‚Ç¨</p>
							{% endif %}
						<div class="gain p-2">
							<div class="coin d-flex align-items-center justify-content-center">
								<img src="{{ asset('images/euro ibei en cours 5.png') }}" alt="euro" class="icon icon-euro" />
								<span class="value">+ {{ purchase.gain | format_number }} ‚Ç¨</span>
							</div>
							{# <div class="xp d-flex align-items-center justify-content-center">
								<img src="{{ asset('images/√©toile ibei en cours 4.png') }}" alt="exp√©rience" class="icon icon-star" />
								<span class="value">Niv. 3</span>
							</div> #}
						</div>
					</div>
				{% endfor %}
			</div>
			{% if purchasesBuyable | length == 0 %}
				<p>Pas de produits achetables</p>
			{% endif %}
		</div>
		<div class="tab-pane fade {{ userConnected.tab }}" id="possessed" role="tabpanel" aria-labelledby="possessed-tab">
			{% if app.user %}
				<div class="text-center">
					<p>
						<a id="harvest-all-link" href={{ path('app_purchase_harvest_all', {id: app.user.id } ) }}>Tout r√©colter</a>
					</p>
					<p class="mt-4">Attention : Faire ceci vous octroiera moins d'exp√©rience</p>
				</div>

			{% endif %}
			<div class="d-flex flow-row justify-content-center align-items-center">
				{% for purchase in purchasesPossessed %}
					{# <div
						class="card mr-4 box-shadow-custom custom-bg-card text-white custom-border-radius custom-shadow-possessed" style="width: 18rem;">
						
						<div class="card-body">
							<h5 class="card-title">{{ purchase.product.name }}</h5>
							<p class="card-text">{{ purchase.product.description }}</p>
							<p class="card-text">Gain :
								{{ purchase.gain | format_number }}
								‚Ç¨</p>
							<p class="card-text">Cooldown :
								{{ purchase.cooldown | duration_format }}</p>
							<span id="compteur-harvest-{{ purchase.id }}" data-id={{ purchase.id }} class="ml-2"></span>
							
							<div id="div-btn-harvest-{{ purchase.id }}" data-id={{ purchase.id }}>
								{% if purchase.isClaimable %}
									<button id="harvest-btn-{{ purchase.id }}" data-id={{ purchase.id }}
									data-url="{{ path('harvest', {id: purchase.id }) }}" 
									class="btn custom-bg-parrot-green harvest-btn text-color-white">R√©colter</button>
								{% else %}
									<p id="remained-seconds-harvest-{{ purchase.id }}" data-id={{ purchase.id }} data-cooldown={{ purchase.cooldown }}>{{ purchase.remainedSeconds | duration_format }}</p>
								{% endif %}
							</div>
						</div>
					</div> #}
					<div class="harvest-card mr-4 mb-4">
						<h5 class="fw-600 card-title">{{ purchase.product.name }}</h5>
						<div class="timer text-white">{{ purchase.cooldown | duration_format }}</div>
						<div class="item-icon">ü•ï</div>
						<span id="compteur-harvest-{{ purchase.id }}" data-id={{ purchase.id }} class="ml-2"></span>
						<div id="gain-info-{{ purchase.id }}" style="display: none; position: relative;"></div>
						<div id="div-btn-harvest-{{ purchase.id }}" data-id={{ purchase.id }}>
									{% if purchase.isClaimable %}
							<button id="harvest-btn-{{ purchase.id }}" data-id={{ purchase.id }}
									data-url="{{ path('harvest', {id: purchase.id }) }}" data-gain={{ purchase.gain}} class="harvest-button animate-button-harvest harvest-btn">R√©colter</button>
							{% else %}
								<p class="fw-600" id="remained-seconds-harvest-{{ purchase.id }}" data-id={{ purchase.id }} data-cooldown={{ purchase.cooldown }}>{{ purchase.remainedSeconds | duration_format }}</p>
							{% endif %}
						</div>
						<div class="stats p-2">
							<div class="coin d-flex align-items-center justify-content-center">
								<img src="{{ asset('images/euro ibei en cours 5.png') }}" alt="euro" class="icon icon-euro" />
								<span class="value">{{ purchase.gain | format_number }} ‚Ç¨</span>
							</div>
							<div class="xp d-flex align-items-center justify-content-center">
								<img src="{{ asset('images/√©toile ibei en cours 4.png') }}" alt="exp√©rience" class="icon icon-star" />
								<span class="value">Niv. 3</span>
							</div>
						</div>
						<div class="xp-bar mt-2">
							<div class="progress" style="width: 60%;"></div>
						</div>
					</div>
				{% endfor %}
			</div>
		</div>
		{% if purchasesPossessed | length == 0 %}

			<p>Pas de produits poss√©d√©s</p>
		{% endif %}


	</div>

	{# </tbody>
						    </table> #}

	{# <a href="{{ path('app_purchase_new') }}">Create new</a> #}
	{# <button id="toggle-music"><i class="fa-solid fa-volume-high" style="color: white;"></i></button> #}
	<audio id="harvest-sound" src="{{ asset('sounds/485718__spacejoe__coin-drop-2.wav') }}"></audio>
	{# <audio id="ambiant-music" src="{{ asset('sounds/spa-ambient-10min-253179.mp3') }}" loop></audio> #}
	{# <button id="myButton">Clique ici</button> #}

{% endblock %}
{% block script %}
	<script>
		// pour les tabs
document.addEventListener( "DOMContentLoaded", function () {
	let tabLinks = document.querySelectorAll( ".nav-link" );
	tabLinks.forEach( link => {
		link.addEventListener( "click", function ( event ) {
			event.preventDefault();
			let activeTab = document.querySelector( ".tab-pane.active" );
			let newTab = document.querySelector( this.getAttribute( "href" ) );

			if ( activeTab ) 
			activeTab.classList.remove( "show", "active" );


			if ( newTab ) 
			newTab.classList.add( "show", "active" );


			tabLinks.forEach( tab => tab.classList.remove( "active" ) );
			this.classList.add( "active" );
		} );
	} );
} );

function startCountdown( $button, $counter, cooldown ) {
	// $button.hide(); // Masquer le bouton
	$counter.show();

	const $bar = $( '<div class="custom-cooldown-bar"></div>' );
	const $text = $( '<div class="custom-cooldown-text"></div>' );
	const $container = $( '<div class="custom-cooldown-wrapper"></div>' ).append( $bar ).append( $text );

	$counter.html( $container ); // Remplace le contenu par le visuel du cooldown

	let timeLeft = cooldown;
	const total = cooldown;

	const interval = setInterval( () => {
		timeLeft--;

		let percent = ( ( total - timeLeft ) / total ) * 100;
		$bar.css( 'width', percent + '%' );
		$text.text( formatTime(timeLeft));

		if ( timeLeft <= 0 ) {
			clearInterval( interval );
			// $counter.text('Disponible !');
			$button.show();
			$counter.text('');
		}
	}, 1000 );
}

function formatTime( seconds ) {
	const hours = Math.floor( seconds / 3600 ); // Nombre d'heures
	const minutes = Math.floor( ( seconds % 3600 ) / 60 ); // Nombre de minutes
	const remainingSeconds = seconds % 60;
	// Nombre de secondes restantes

	// Ajouter un z√©ro devant les chiffres inf√©rieurs √† 10
	return( String( hours ).padStart( 2, '0' ) + ":" + String( minutes ).padStart( 2, '0' ) + ":" + String( remainingSeconds ).padStart( 2, '0' ) );
}

function convertToSeconds( timeString ) {
	const timeArray = timeString.split( ':' ); // On divise la cha√Æne de caract√®res
	const hours = parseInt( timeArray[ 0 ] ); // Heures
	const minutes = parseInt( timeArray[ 1 ] ); // Minutes
	const seconds = parseInt( timeArray[ 2 ] ); // Secondes

	return( hours * 3600 ) + ( minutes * 60 ) + seconds; // Conversion en secondes
}

// let isPlaying = false;
// $(document).one('click', function() {
//     $('#ambiant-music')[0].play();
// 	isPlaying = true;
// 	$('#toggle-music').html('<i class="fa-solid fa-volume-xmark" style="color: white;"></i>');
// });
$( document ).ready( function () {
	// pour la musique d'ambiance
	// let music = $('#ambiant-music')[0];

    //     $('#toggle-music').on('click', function() {
    //         if (!isPlaying) {
    //             music.play();
    //             $('#toggle-music').html('<i class="fa-solid fa-volume-xmark" style="color: white;"></i>');
    //             isPlaying = true;
    //         } else {
    //             music.pause();
    //             $('#toggle-music').html('<i class="fa-solid fa-volume-high" style="color: white;"></i>');
    //             isPlaying = false;
    //         }
    //     });
	
	$("#harvest-all-link").on('click', function() {
            $('#harvest-sound')[0].play();
        });

		

	// pour le compte √† rebours

	$( '[id^="remained-seconds-harvest-"]' ).each( function () { // console.log($(this).text()); // ou fais autre chose
		let remainedParagraph = $( this );
		let fullId = this.id;
		// ou $(this).attr('id');

		// Extraire uniquement le nombre √† la fin avec une regex
		let id = fullId.match( /\d+$/ )[ 0 ];
		let counterValueTemp = $( this ).text();
		let counterValue = convertToSeconds( counterValueTemp );
		let $counter = $( this );
		let $remainedSeconds = $('#remained-seconds-harvest-' + id);
		// convertir hh:mm:ss en barre de d√©compte
		const $bar = $( '<div class="custom-cooldown-bar-refresh"></div>' );
		const $text = $( '<div class="custom-cooldown-text"></div>' );
		const $container = $( '<div class="custom-cooldown-wrapper"></div>' ).append( $bar ).append( $text );

		$counter.html( $container );

		let timeLeft = counterValue;
		const total = $remainedSeconds.data( 'cooldown' );
		// const total = convertToSeconds($remainedSeconds.data( 'cooldown' ));
		// console.log(total);
		$bar.css( 'width', ( ( total - timeLeft ) / total ) * 100 + '%' );
		// $bar.css('width', '50%');
		$text.text( formatTime(timeLeft));

		const interval = setInterval( () => {
			$bar.removeClass("custom-cooldown-bar-refresh").addClass("custom-cooldown-bar");
			timeLeft--;
			let percent = ( ( total - timeLeft ) / total ) * 100;
			$bar.css( 'width', percent + '%' );
			$text.text( formatTime(timeLeft));

			if ( timeLeft <= 0 ) {
				clearInterval( interval );
				// $counter.text('Disponible !');
				
				let idBtn = '#harvest-btn-' + id

				// Cr√©er le bouton dynamiquement avec jQuery
				let $button = $( '<button>', {
					id: 'harvest-btn-' + id,
					'data-id': id,
					'data-url': '/purchase/harvest/' + id,
					class: 'btn custom-bg-parrot-green harvest-btn harvest-button text-color-white',
					text: 'R√©colter'
				} );

				$button.on( 'click', function () {
					const $button = $( this );
					// jouer le son de la r√©colte
							$('#harvest-sound')[0].play();
					// $button.hide();
					const id = $button.data( 'id' );
					const url = $button.data( 'url' );
					const $counter = $( '#compteur-harvest-' + id );
					// console.log('#compteur-' + id);
					$counter.addClass("fw-600").text( "R√©cup√©ration de l'argent" );


					// Appel AJAX vers la route Symfony
					$.ajax( {
						url: url, method: 'GET', // ou POST selon ta route
						success: function ( response ) {
						if ( response.isClaimable ) {

							$( "#money" ).text( "Argent : " + response.money.toLocaleString( 'fr-FR' ) + " ‚Ç¨" )
							$( "#exp" ).text( "Exp√©rience : " + response.exp )
							startCountdown( $button, $counter, response.cooldown );
						}

						},
							error: function ( err ) {
							console.error( 'Erreur AJAX :', err );
						}
					} );
				} );
				// $button.show();
				// $counter.hide();

				// Ajouter le bouton au DOM (par exemple √† un √©l√©ment avec l'ID #container)
				$( '#div-btn-harvest-' + id ).append( $button );

				let idP = '#remained-seconds-harvest-' + id
				$( idP ).hide()
			}
		}, 1000 );

		// console.log(counterValue);

		function updateCounter() { // console.log('c', counterValue)
		if ( counterValue >= 0 ) { // console.log(remainedParagraph)
			remainedParagraph.text( formatTime( counterValue ) );
			counterValue--;
		} }

		
	} );


	$( '.harvest-btn' ).click( function () {
		
		const $button = $( this );
		// jouer le son de la r√©colte
		// $button.on('click', function() {
            $('#harvest-sound')[0].play();
        // });
		$button.hide();
		const id = $button.data( 'id' );
		const url = $button.data( 'url' );
		const gain = $button.data( 'gain' );
		const $counter = $( '#compteur-harvest-' + id );
		// console.log('#compteur-' + id);
		$counter.addClass("fw-600").text( "R√©cup√©ration de l'argent" );

		// pour les animations argent et xp gagn√©es
        let $gainInfo = $('#gain-info-' + id);

		$gainInfo.text('+ ' + gain + '‚Ç¨ + 2xp')
            .css({top: '30px', opacity: 1}) // Position de d√©part
            .show()
            .animate(
                { top: '10px' }, 
                {
                    duration: 1500,        // plus lent
                    easing: 'swing',        // "swing" est plus doux que "linear"
                    step: function(now, fx) {
                        if (fx.prop === 'top' && parseInt(now) <= 10) {
                            $gainInfo.fadeOut(400); // fondu quand arriv√© √† 10px
                        }
                    }
                }
            );


		// Appel AJAX vers la route Symfony
		$.ajax( {
			url: url, method: 'GET', // ou POST selon ta route
			success: function ( response ) {
				if ( response.isClaimable ) {

					$( "#money" ).text( "Argent : " + response.money.toLocaleString( 'fr-FR' ) + " ‚Ç¨" )
					$( "#exp" ).text( "Exp√©rience : " + response.exp )
					startCountdown( $button, $counter, response.cooldown );
				}

			},
				error: function ( err ) {
				console.error( 'Erreur AJAX :', err );
			}
		} );
	} );
} );
	</script>
{% endblock %}
